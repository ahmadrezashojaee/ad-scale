%% Example of connecting the well-region grid to Cartesian grid by the Voronoi grid
%
% This example demonstrates the use of Voronoi (pebi) grid to connect the 
% well-region (WR) grid to Cartesian grid. The Voronoi grid is constructed
% by the combination of 'voronoin' (provides grid nodes and connectivity
% list) and 'tessellationGrid', before which five special treatments are 
% conducted, i.e. 
% * Designing the generating points
% * Clipping the Voronoi diagram
% * Removing conflicting points
% * Connecting with the WR grid
% * Connecting with the Cartesian grid

clear
mrstModule add nwm upr ad-core ad-props ad-blackoil diagnostics

%% Build the Cartesian grid
GC = cartGrid([25, 25], [200, 200]);
GC = computeGeometry(GC);

%% Define well trajectory and region of interest (ROI) boundary
% The well trajectory, should be located inside the ROI boundary.
ns = 12;
th = linspace(0.85, 0.7, ns+1)' * pi;
traj = [150*cos(th)+200, 150*sin(th)];
% The polygonal ROI boundary
pbdy = [136, 150;
        145,  95;
         90,  30;
         35,  45;
         45, 105;
         90, 160];
     
% Get cells inside and outside the ROI
cCtro = GC.cells.centroids;
in = inpolygon(cCtro(:,1), cCtro(:,2), pbdy(:,1), pbdy(:,2));
cI = find( in );
cO = find(~in );

% Extract the sorted boundary nodes and boundary cells (in counterclockwise).
% The actual ROI boundary is aligned to the grid edges (faces) and 
% therefore lead the nonconvex polygons. So, we first sort the convex 
% polygon specified by the centroids of boundary edges, and then obtain the 
% sorted boundary nodes and cells from associated faces.
[bnC, bcC] = extractBdyNodesCells(GC, cI);

% Plot the ROI boundary
figure, hold on, axis equal tight off
plotGrid(GC, cO, 'facecolor', 'none')
plotGrid(GC, cI, 'facecolor', 'y')
demoPlotLine(traj, 'ko-', 'b', 4)
demoPlotPoly(pbdy, 'k^-', 'r', 5)
demoPlotPoly(GC.nodes.coords(bnC,:), 'ks-', 'g', 4)
legend('GC outside the ROI', 'GC inside the ROI', 'Well path' ,...
    'Specified ROI boundary','Clipped ROI boundary')

%% Get the points and connectivity list of WR grid
% The WR grid is built along the well trajectory, consisting of a Cartesian
% region and two half-radial regions. For the Cartesian region, the X axis 
% extends along the well trajectory. (see 'nearWellBoreModelingGrids')

% The number of Cartesian cells in Y direction
ny = 8;
% The size Cartesian region in Y direction
ly = 12;
% The number of angular cells in radial region
na = 6;
% Generate the WR grid points
pW0 = arrayfun(@(ii)pointsSingleWellNode(traj, ly, ny, na, ii), (1:ns+1)');
pW  = [vertcat(pW0.cart); vertcat(pW0.rad)];
% Make sure that all well-region points are located inside the ROI
assert( all(inpolygon(pW(:,1), pW(:,2), GC.nodes.coords(bnC,1), ...
    GC.nodes.coords(bnC,2))) );
% Get the connectivity list and boundary nodes
[tW, ~, bnW] = getConnListAndBdyNodeWR2D(pW0, ny, na);
% Build the WR grid
GW = tessellationGrid(pW, tW);

figure, hold on, axis equal tight off
plotGrid(GC, cO, 'facecolor', 'none')
plotGrid(GW, 'facecolor', [.0, .44, .74])
demoPlotPoly(GC.nodes.coords(bnC, :), 'ks-', 'g', 4)
demoPlotPoly(pW(bnW, :), 'ko-', 'y', 3)
legend('GC outside the ROI', 'GW (WR grid)', 'ROI boundary' ,'WR boundary')

%% Design the generating points
% The Voronoi grid is built within the region between the outer boundary 
% (ROI boundary) and inner boundary (WR grid boundary), namely transition 
% region (TR) here. The nodes of the Voronoi grid should locate the nodes 
% of outer and inner boundaries. Therefore, the generating points should be
% designed. Here, the generating point set consist of the basic point set 
% and the auxiliary point set.

% The basic points are generated by 'DistMesh' (Per-Olof Persson) within 
% the reduced TR. The outer boundary of reduced TR is specified by the 
% centroids of boundary cells (bcC), and the inner boundary is specified 
% the intersection points (outside the WR grid) of circumcircles of the WR 
% boundary nodes.

% The boundaries of TR
pob  = GC.nodes.coords(bnC,:);
pib  = pW(bnW, :);

% The boundaries of reduced TR
pob2 = GC.cells.centroids(bcC, :);
[pIn, pOut, R] = demoComputeAuxPts(pW, bnW, 0.35);
pib2 = pOut;

% Plot the boundaries
figure, hold on, axis equal tight off
demoPlotPoly(pob,  'ks-', 'g', 4)
demoPlotPoly(pib,  'ko-', 'y', 3)
demoPlotPoly(pob2, 'ks-', 'r', 4)
demoPlotPoly(pib2, 'ko-', 'b', 3)
legend('Outer boundary of TR' ,'Inner boundary of TR', ...
    'Outer boundary of reduced TR' ,'Inner boundary of reduced TR')

% Generate basic points by 'Distmesh'
[pdis, tdis] = passToDistmesh(pib2, pob2, 0.2, 500, 'pIBRadius', R);

% The auxiliary points consist of the centroids of the Cartesian cells
% outside the ROI and the intersection points (inside the WR grid) of 
% circumcircles of the WR boundary nodes.
pauxW = pIn;
pauxC = GC.cells.centroids(cO, :);

% Combine the basic points and auxiliary points to get the generating
% points of the Voronoi diagram
pall = [pdis; pauxC; pauxW];
% Get the nodes and connectivity list of the Voronoi diagram
[pVor, tVor] = voronoin(pall, {'Qbb','Qz'});

% Plot the Voronoi diagram
figure, hold on, axis equal off
voronoi(pall(:,1), pall(:,2), '-')
demoPlotPoly(pdis,  'ro',  'r', 2)
demoPlotPoly(pauxC, 'bo',  'b', 2)
demoPlotPoly(pauxW, 'k^',  'k', 3)
demoPlotPoly(pob,   'ks-', 'g', 4)
demoPlotPoly(pib,   'ko-', 'y', 3)
legend('', 'Initial Voronoi digram', 'Basic points' ,'Auxiliary points (CO)', ...
    'Auxiliary points (WR)', 'Outer boundary of TR' ,'Inner boundary of TR')
xlim([-20, 220])
ylim([-20, 220])

%% Handle the Voronoi diagram
% Here, three treatments are performed:
% * Clipping the Voronoi diagram
% * Removing conflicting points
% * Connecting with the WR grid
[pVor, tVor, bnVor] = demoHandleVoronoiDiag(pVor, tVor, pib, pob, pW, tW, bnW);

%% Connect with the Cartesian grid
% Next, connect the Voronoi grid (already connected to the WR grid) with
% the Cartesian grid
% Remove cells inside the ROI
[GC_Rem, ~, ~, mapn] = removeCells(GC, cI);
pC = GC_Rem.nodes.coords;

% Get the indices of boundary nodes in GC_Rem
bnC = arrayfun(@(n)find(mapn == n), bnC);

% Merge the common nodes (boundary nodes). The boundary node indices in pC 
% are replaced by the ones in pVor
nNo  = (1:size(pC,1))';
% The non-boundary nodes indices
idx  = ~ismember(nNo, bnC);
nNo(idx) = (1:nnz(idx))' + size(pVor,1);
pC = pC(idx,:);
% We already know the boundary nodes in pVor: bnVor
nNo(bnC)  = bnVor;

% Map the connectivity list of GC_Rem
[cnC, pos] = gridCellNodes(GC_Rem, (1:GC_Rem.cells.num));
cnC = nNo(cnC);
tC  = arrayfun(@(c)cnC(pos(c):pos(c+1)-1), (1:GC_Rem.cells.num)', ...
    'UniformOutput', false);

%% Get the hybrid grid
% Assemble the points and connectivity lists
p = [pVor; pC];
t = [tVor; tC];
t = sortPtsCounterClockWise(p, t);

% Build the hybrid grid
G = tessellationGrid(p, t);
G = computeGeometry(G);

figure, hold on, axis equal tight off
plotGrid(G)

%% Run simulation on the hybrid grid
% Define a two phase (oil-water) fluid
fluid = initSimpleADIFluid('mu',    [1, 5, 0]*centi*poise, ...
                           'rho',   [1000, 700, 0]*kilogram/meter^3, ...
                           'n',     [2, 2, 0],...
                           'c',     [1e-5, 1e-4, 0] * (barsa)^(-1));
                       
% Make rock
rock = makeRock(G, [.25, .25]*darcy, 0.25);
% Let the permeability of WR be higher
idx = (1:size(tW,1))'; % The cell indices of WR
rock.perm(idx, :) = rock.perm(idx, :) * 20;
% Plot the X permeability
figure, hold on; axis equal off
plotCellData(G, rock.perm(:,1))
title('X permeability')

% Setup simulation model
model = TwoPhaseOilWaterModel(G, rock, fluid);

% Define the wells
% Injector, south-west corner cell
D = sqrt( sum(G.cells.centroids.^2, 2) );
wcI = find( D==min(D) );
W = addWell([], G, rock, wcI, 'Name', 'INJ', 'sign', 1, ...
    'comp_i', [1, 0], 'Val', 10*(meter^3/day), 'Type', 'rate');

% Producer, north-east corner cell
wcP = find( D==max(D) );
W = addWell(W, G, rock, wcP, 'Name', 'PROD', 'sign', -1, ...
    'comp_i', [1, 1], 'Val', 100*(barsa), 'Type', 'bhp');

% Plot the well cells
figure, hold on; axis equal off
plotGrid(G, 'facecolor', 'none')
plotGrid(G, W(1).cells, 'facecolor', 'r')
plotGrid(G, W(2).cells, 'facecolor', 'b')
legend('G', 'Injector cell', 'Producer cell')

% Define the schedule
timesteps = ones(20,1)*30*day;
schedule  = simpleSchedule(timesteps, 'W', W);

% Define the initial state
sW = zeros(G.cells.num, 1);
sat = [sW, 1 - sW];
state0 = initResSol(G, 300*barsa, sat);

% Run the simulation
[wellSols, states, report] = simulateScheduleAD(state0, model, schedule);

%% Plot the results
% Well solutions
plotWellSols(wellSols, report.ReservoirTime)

% Oil saturation
ts = 20;
state = states{ts};
figure
subplot(1,3,1), axis equal tight off
plotCellData(G, state.s(:,2), 'edgecolor', 'none')
title('Oil saturation')
% Pressure
subplot(1,3,2), axis equal tight off
plotCellData(G, state.pressure/barsa, 'edgecolor', 'none')
title('Pressure')
% TOF
W = schedule.control.W;
D = computeTOFandTracer(state, G, rock, 'wells', W);
subplot(1,3,3), axis equal tight off
plotCellData(G, D.tof(:,1), 'edgecolor', 'none')
title('TOF from injector')
