%% Section 3.1: Background Cartesian grids
% Show the PEBI equivalents of cartGrid and tensorGrid.

% Equivalent of cartGrid
dx = 0.25; dy = 0.25; % mesh size in x and y direction
xmax = 1; ymax = 1;   % Domain length in x and y direction
G = compositePebiGrid2D([dx, dy], [xmax, ymax]);

figure()
plotGrid(G, 'faceColor','none'), axis equal off

% Equivalent of tensorGrid
[X, Y] = meshgrid(linspace(0,1,5));
G      = pebi(triangleGrid([X(:), Y(:)]));

figure
plotGrid(G, 'facecolor', 'none');
hold on
plot(X(:), Y(:), '.','markersize', 25)
axis equal off

%% Section 3.2: Optimized Delaunay triangulation
% In the first example, we show a PEBI grid generated by using DistMesh to
% fill the unit square with generating points. We also show the underlying
% Delaunay grid
h          = 0.25;
domain     = [1, 1];
[G, sites] = pebiGrid2D(h, domain);
Gt         = triangleGrid(sites);

figure('Position',[480 340 980 420])
subplot(1,2,1), hold on
plotGrid(G, 'facecolor', 'none');
plot(sites(:,1), sites(:,2), '.','markersize', 32)
axis tight off
subplot(1,2,2), hold on
plotGrid(Gt, 'facecolor', 'none');
plot(sites(:,1), sites(:,2), '.','markersize', 32)
axis tight off

%%
% The second example shows how one can use the same approach to tessellate
% a star-shaped domain
bndr = [0, 0; 0.5, 0.2; 1, 0; 0.8, 0.5;
        1, 1; 0.5, 0.8; 0, 1; 0.2, 0.5];

[G, sites] = pebiGrid2D(h, domain, 'polyBdr', bndr);

figure
plotGrid(G, 'facecolor', 'w');
hold on
plot(sites(:,1), sites(:,2), '.','markersize', 25)
axis('equal','off')

%% Section 3.3: Minimized centroidal energy function
% This section discusses centroidal PEBI grid, which are constructed by
% optimizing a corresponding energy functional. Note that the plot will not
% be exactly like in the book, since the generating points are sampled
% randomly.

% Domain boundary
bndr = [0, 0; 0.5, 0.2; 
        1, 0; 0.8, 0.5;
        1, 1; 0.5, 0.8; 
        0, 1; 0.2, 0.5];

% Initial sites
isites = 0.2 + 0.6 * rand(60,2);

figure
nit = [0 3 5 10 20 200];
for i=1:numel(nit)
    
    % Call optimization routine
    [G, sites] = CPG2D(isites, bndr, 'maxIt', nit(i));

    subplot(2,3,i)
    set(gca,'Clipping','off');
    plotGrid(G, 'facecolor', 'w');
    hold on
    plot(sites(:,1), sites(:,2), '.','markersize', 18)
    axis('equal','off'), zoom(1.3)
end