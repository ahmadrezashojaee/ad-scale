%% Section 2.3: Delaunay triangulation
% We start by demonstrating demonstrating the empty circumcircle principle
% for a Delaunay triangulation (shown in Figure 1)
figure, hold on
pts = [ 0, 0; .1,.8; .3,.4; .5,.6; 1, 1; .8,.2]; 
Gt  = triangleGrid(pts);
dt  = delaunayTriangulation(pts);
[CC, r] = circumcenter(dt,(1:size(pts,1)).');
theta = linspace(0,2*pi)';
for i = 1:size(CC)
    X = repmat(CC(i,:),100,1) + repmat(r(i),100,2).*[cos(theta), sin(theta)];
    plot(X(:,1), X(:,2),'-','LineWidth',2)
end
plotGrid(Gt,'facecolor','none','edgecolor','k','linestyle',':','LineWidth',2)
plot(pts(:,1), pts(:,2),'.k','markersize',30);
axis equal tight off

%% 
% The next example shows a simple Delaunay triangulation of a set of
% generating point consisting of the vertices of the unit square plus an
% internal point
sites = [0, 0; 1, 0; 1, 1; 0, 1; 1/3, 1/3];
t     = delaunay(sites);           % Create Delaunay triangulation
G     = triangleGrid(sites, t);    % Convert to MRST grid

figure
plotGrid(G, 'faceColor', 'none');
hold on
plot(sites(:,1), sites(:,2), '.','markersize', 25)
axis('equal', 'off');

%%
% The last example in this subsection shows that the Delaunay construction
% is not unique. To this end, we use delaunay and delaunayn to triangulate
% the same rectangular point set. The latter is based on Qhull and is
% generally not able to give a structured triangulation
[X,Y] = meshgrid(1:5,1:4);
pts   = [X(:) Y(:)];

figure('position',[100 100 700 320]);
subplot(1,2,1)
G1 = triangleGrid(pts,delaunay(pts));
plotGrid(G1,'FaceColor',[1 1 .8]);
hold on,
plot(X(:),Y(:),'o','MarkerFaceColor',[.7 .7 .7],'LineWidth',1); axis off

subplot(1,2,2)
G2 = triangleGrid(pts,delaunayn(pts));
plotGrid(G2,'FaceColor',[1 1 .8]);
hold on,
plot(X(:),Y(:),'o','MarkerFaceColor',[.7 .7 .7],'LineWidth',1); axis off


%% Section 2.2: PEBI grids
% Figure 3 in the book chapter shows the duality of a Delaunay
% triangulation and a PEBI grid in 2D. Delaunay vertices correspond to PEBI
% cells (blue points). Delaunay edges are perpendicular to the
% corresponding PEBI edges. The circumcenter of a Delaunay triangle
% corresponds to a PEBI vertex (purple points).
figure('position',[100 100 1000 320]);
bndry = 10*[-1, -1; -1,  1;  1,  1;  1, -1];
pts   = [ -0.1,.4; .3,.1; .2,.8; .3,.4; .5,.6; .8,.8; .7,.3];
Gt    = triangleGrid(pts);
G     = clippedPebi2D(pts, bndry);
G     = computeGeometry(G);
col   = get(gca,'ColorOrder');
box   = [-0.1,0;-0.1,1;1,1;1,0;-0.1,0];

dt      = delaunayTriangulation(pts);
[CC, r] = circumcenter(dt);
theta   = linspace(0,2*pi)';
X  = repmat(CC(1,:),100,1) + repmat(r(1),100,2).*[cos(theta), sin(theta)];

for i=1:3
    subplot(1,3,i), hold on
    plot(pts(:,1), pts(:,2),'.','color',col(1,:),'markersize',30);
    plot(G.nodes.coords(:,1), G.nodes.coords(:,2),'.', ...
        'color',col(4,:),'markersize',30);
    plot(X(:,1), X(:,2),'--','color',[0.2,0.2,0.2])
    plot(box(:,1), box(:,2),'k--');
    axis off equal
    axis([-0.1,1,0,1])
    if i~=2, plotGrid(G,'facecolor','none'); end
    if i~=1, plotGrid(Gt,'facecolor','none','edgecolor',col(2,:)); end
end

%% 
% The first example compares a Delaunay triangulation and its dual PEBI grid
% for a set of random points within the unit square. (Because the sites are
% random, the grids will not be identical to those shown in the chapter.)
n     = 5;
[X,Y] = meshgrid(linspace(0,1,n));
sites = [X(:),Y(:)];

% Perturb inner points
isIn = false(n,n); 
isIn(2:end-1,2:end-1) = true;
sites(isIn(:),:) = sites(isIn(:), :) + 0.1*randn((n-2)^2, 2);

% Create grids
Gt = triangleGrid(sites);
Gv = pebi(Gt);

figure('position',[100 100 700 320]);
subplot(1,2,1)
plotGrid(Gt, 'facecolor', 'none');
hold on, plot(sites(:,1), sites(:,2), '.','markersize', 25), hold off
axis equal off

subplot(1,2,2)
plotGrid(Gv, 'facecolor','none');
hold on, plot(sites(:,1), sites(:,2), '.','markersize', 25), hold off
axis equal off;

%%
% The second example in Section 2.2 shows a 3D PEBI grid generated by the
% MATLAB function voronoin from sites set on a structured curvilinear mesh.
% The voronoin function will create an unbounded Voronoi diagram that
% extends to inifinity. To avoid these, we filter away the outer layer of
% Voronoi cells before converting to the MRST grid structure
keep = false(11,11,11); 
keep(2:10,2:10,1:11)=true;
[X,Y,Z] = meshgrid(linspace(0,1,11));
sites   = [X(:)+.5*Y(:).^2 Y(:) Z(:)];
[V,C]   = voronoin(sites);
C       = C(keep(:));
G       = voronoi2mrstGrid3D(V,C);

figure
plotGrid(G); view(120,25) 
axis equal tight off, camlight headlight
set(gca,'DataAsp',[1 .7 2.5])
sites=sites(keep(:),:);
hold on, plot3(sites(:,1),sites(:,2),sites(:,3),'.','MarkerSize',10);

%%
% The last example in Section 2.2 shows how you can create a PEBI grid
% bounded by a convex polygonal in 3D. The routine mirroredPebi3D does this
% by placing mirror sites outside the bounding polygonal.
pts = rand(10, 3);

% Define the unit cube as boundary
bnd = [0 0 1 1 0 0 1 1; ...
       0 1 1 0 0 1 1 0; ...
       0 0 0 0 1 1 1 1]';

   % Create clipped Pebi grid
G = mirroredPebi3D(pts, bnd);

figure();
plotGrid(G);
set(gca, 'zdir', 'normal')
view(30, 20), axis equal off tight
light('position', [3,-10, 10])

%% Section 2.3: Clipping PEBI grids
% We show an example of a PEBI grid generated from a set of random sites
% and clipped against a nonconvex polygonal boundary